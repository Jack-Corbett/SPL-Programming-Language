#################################################################
## Iro
################################################################
##
## * Press Ctrl + '+'/'-' To Zoom in
## * Press Ctrl + S to save and recalculate...
## * Documents are saved to web storage.
## * Only one save slot supported.
## * Matches cannot span lines.
## * Unicode chars must be defined in \u0000 to \uffff format.
## * All matches must be contained by a single group ( ... )
## * Look behinds not permitted, (?<= or (?<!
## * Look forwards are permitted (?= or (?!
## * Constants are defined as __my_const = (......)
## * The \= format allows unescaped regular expressions
## * Constants referenced by match \= $${__my_const}
## * Constants can reference other constants
## * You are free to delete all the default scopes.
## * Twitter : ainslec , Web: http://eeyo.io/iro
##
################################################################

name                   = SPL
file_extensions []     = spl;

################################################################
## Constants
################################################################

__MY_CONSTANT \= (\b[a-z][a-zA-Z0-9]*)

################################################################
## Styles
################################################################

styles [] {

.comment : style {
   color                 = grey
   italic                = true
   ace_scope             = comment
   textmate_scope        = comment
   pygments_scope        = Comment
}

.keyword : style {
   color                 = cyan
   ace_scope             = keyword
   textmate_scope        = keyword
   pygments_scope        = Keyword
}

.method : style {
   color                 = light_blue
   ace_scope             = entity.name.type
   textmate_scope        = entity.name.type
   pygments_scope        = Operator
}

.structure : style {
   color                = violet_red
   ace_scope            = entity.name.function
   textmate_scope       = entity.name.function
   pygments_scope       = Generic
}

.boolean : style {
   color                = light_green
   ace_scope            = string
   textmate_scope       = string
   pygments_scope       = Literal
}

.numeric : style {
   color                 = gold
   ace_scope             = constant.numeric
   textmate_scope        = constant.numeric
   pygments_scope        = Number
}

.punctuation : style {
   ace_scope             = punctuation
   textmate_scope        = punctuation
   pygments_scope        = Punctuation
}

}

#################################################
## Parse contexts
#################################################

contexts [] {

##############################################
## Main Context - Entry point context
##############################################

main : context {

   : include "numeric" ;

   : inline_push {
      regex          \= (\{)
      styles []       = .punctuation;
      : pop {
         regex       \= (\})
         styles []    = .punctuation;
      }
      : include "main" ;
   }

   : pattern {
      regex          \= (;)
      styles []       = .punctuation;
   }

   : inline_push {
      regex          \= (\()
      styles []       = .punctuation;
      : pop {
         regex       \= (\))
         styles []    = .punctuation;
      }
      : include "main" ;
      : pattern {
         regex       \= (,)
         styles []    = .punctuation;
      }
   }

   : pattern {
      regex          \= (input|output)
      styles []       = .method;
   }

   : pattern {
      regex          \= (whileInput|if|else)
      styles []       = .structure;
   }

   : pattern {
      regex          \= (true|false)
      styles []       = .boolean;
   }


   : pattern {
      regex          \= $${__MY_CONSTANT}
      styles []       = .keyword;
   }

   : pattern {
      regex          \= (--.*)
      styles []       = .comment;
   }
}

#################################################
## End of Contexts
#################################################

###########################################
## Numeric Context
###########################################

numeric : context {
   : pattern {
      regex          \= (\b\d+)
      styles []       = .numeric;
   }
}
}
